{
  # $Id: 80SubDomainGit 1 2012-04-22 11:25:58Z marco $
  #
  # Git Repositories Template
  #
  # This configures the Apache 2.x webserver to be able to function
  # as a Git repository server using git-http-backend and gitweb.
  #
  # Required packages: git gitweb
  #  
  # This setup provides "dual URLS", where URL like <http://git.example.com/my_repository.git>
  # loads Gitweb in the browser and the same URL can be used in commands like `git clone` and `git remote add`.
  #
  # Please see documentation for:
  #   1. `git-http-backend`, <http://www.kernel.org/pub/software/scm/git/docs/git-http-backend.html>
  #   2. `gitweb`, <http://repo.or.cz/w/alt-git.git?a=blob_plain;f=gitweb/README>
  #
  # Also see Scott Chacon's "Smart HTTP Transport", <http://progit.org/2010/03/04/smart-http.html>
  #
  # Access Rules:
  # - Global:  gitweb view from the Internet and the local network with public repositories
  #            repository read from the Internet and the local network
  #            repository write from the Internet but authenticated with HTTPS
  # - Private: gitweb unauthenticated view from the local network with all repositires
  #            gitweb authenticated / HTTPS view from the internet 
  #            repository write allowed from the Internet but authenticated with HTTPS
  # - Local:   accessible only from the local network (incl. gitweb)
  # 
  # Copyright (C) 2012 Marco Hess <marco.hess@through-ip.com>
  #
  # This file should not be edited. If you want to make changes to it
  # copy it to the /etc/e-smith/templates-custom directory and make
  # your modifications in the new copy. This way modifications are
  # saved when the system is restored from a backup or configuration
  # changes are made.
  #
  # This section will configure a virtual host with the necessary directory settings to
  # enable the webserver to manage the configured repositories
  
  use esmith::ConfigDB;      # General semserver-git configuration
  use esmith::NetworksDB;    # Get the network IP address configuration
  use esmith::AccountsDB;    # Collect users that are members of a group
  use esmith::GitDB;         # Contains all git repositories configuration data

  my $config_db = esmith::ConfigDB->open_ro() or
    die "Couldn't open ConfigDB\n";

  my $status = $git{'status'} || "disabled";
  return "    # git-status is disabled.\n"
    unless $status eq 'enabled';

  my $domain = $git{'domain'} || "disabled";
  return "    # no hostname or domain for git defined\n"
    if $domain eq 'disabled';

  my $access = $git{'access'} || "disabled";
  return "    # no access setting for git defined\n"
    if $access eq 'disabled';

  my $debugging         = $git{'debugging'}        || "disabled";
  my $user_repositories = $git{'UserRepositories'} || "disabled";
    
  # Open additional databases for configuring individual repositories  
  my $networks_db = esmith::NetworksDB->open or
    die "Couldn't open NetworksDB\n";
    
  my $accounts_db = esmith::AccountsDB->open or
    die "Couldn't open AccountsDB\n";
  
  my $git_db = esmith::GitDB->open or
    die "Couldn't open GitDB\n";

  # Setup access permissions for webgit viewing  
  my $gitweb_allow;
  # Setup the rules from which address range we allow access
  if ($git{'AccessType'}) {
    if ($git{'AccessType'} eq 'global') {
      $gitweb_allow = 'All';
    } elsif ($git{'AccessType'} eq 'private') {
      $gitweb_allow = join (' ', ($localAccess, $externalSSLAccess)) ;
    } elsif ($git{'AccessType'} eq 'local') {
      $gitweb_allow = $localAccess;
    } else {
      $gitweb_allow = '127.0.0.1'; # Catch incorrect values, including empty ones
    }
  }
    
  my $GitWebRoot        = "/usr/share/gitweb";
  my $GitRepositoryRoot = "/home/e-smith/files/git";

  $OUT  = "";
  $OUT .= "# " . $networks_db->local_access_spec('private') .  "\n";
  $OUT .= "# " . $networks_db->local_access_spec('public') .  "\n";
  
  foreach my $port (qw(80 443)) 
  {
    $OUT .= "<VirtualHost 0.0.0.0:$port>\n";
    $OUT .= "  # Configure hostname\n";
    $OUT .= "  ServerName   $domain\n";

    if( $port eq 443 ) {    
      $OUT .= "  SSLEngine    on\n";
    }
    
    $OUT .= "\n";
    $OUT .= "  # Configure repository location\n";
    $OUT .= "  DocumentRoot $GitRepositoryRoot\n";
    $OUT .= "  Options ExecCGI FollowSymLinks\n";
    $OUT .= "\n";
    
    if( $debugging eq 'enabled' ) {
      $OUT .= "  # Set logging options - mainly for debugging\n";
      $OUT .= "  LogLevel        debug\n";
      $OUT .= "  # for debugging rewrite rules\n";
      $OUT .= "  RewriteLog      /var/log/httpd/rewrite_log\n";
      $OUT .= "  RewriteLogLevel 9\n";
      $OUT .= "\n";
    }
    
    $OUT .= "  # Setup password authentication method\n";
    $OUT .= "  AddExternalAuth       pwauth /usr/lib/httpd/modules/pwauth\n";
    $OUT .= "  SetExternalAuthMethod pwauth pipe\n";
    $OUT .= "\n";
    $OUT .= "  # Load configuration for Gitweb <https://git.wiki.kernel.org/index.php/Gitweb>\n";
    $OUT .= "  SetEnv GITWEB_CONFIG /etc/gitweb.conf\n";
    $OUT .= "\n";
    $OUT .= "  # Configure Git HTTP Backend\n";
    $OUT .= "  SetEnv GIT_PROJECT_ROOT $GitRepositoryRoot\n";
    $OUT .= "  SetEnv GIT_HTTP_EXPORT_ALL\n";
    $OUT .= "  SetEnv REMOTE_USER=\$REDIRECT_REMOTE_USER\n"; 
    $OUT .= "\n";
    
    if( $user_repositories eq 'enabled' ) {
      $OUT .= "  # Serve repositories in users directory git as well\n";
      $OUT .= "  RewriteRule ^/~([^\\/]+)/?\$  /gitweb/gitweb.cgi [QSA,E=GITWEB_PROJECTROOT:/home/e-smith/files/users/\$1/git/,L,PT]\n";
      $OUT .= "\n";
    }
    
    $OUT .= "  # We use ScriptAliasMatch to match those URLs \n";
    $OUT .= "  # that git-http-backend can handle, and forward the rest to gitweb\n";
    $OUT .= "  ScriptAliasMatch \\\n";
    $OUT .= "            \"\(\?x\)\^\/\(\.\*/(HEAD \| \\\n";
    $OUT .= "                        info/refs \| \\\n";
    $OUT .= "                        objects/\(info/\[^/\]+ \| \\\n";
    $OUT .= "                                 \[0-9a-f\]\{2\}/\[0-9a-f\]\{38\} \| \\\n";
    $OUT .= "                                 pack/pack-\[0-9a-f\]\{40\}\\.\(pack|idx\)\) \| \\\n";
    $OUT .= "                        git-\(upload\|receive\)-pack\)\)\$\" \\\n";
    $OUT .= "            /usr/libexec/git-core/git-http-backend/\$1\n";
    $OUT .= "\n";

#    $OUT .= "  # Serve HTML with gitweb. Use Alias to also allow serving CSS and JS files.\n";
#    $OUT .= "  Alias  /gitweb          /usr/share/gitweb\n";
#    $OUT .= "\n";

#    $OUT .= "  # Ensure we can browse the repo with http://git.server.com/repo.git\n";
#    $OUT .= "  # instead of http://git.server.com/?p=repo.git;a=summary.\n";
#    $OUT .= "  RewriteEngine on\n";
#    $OUT .= "  RewriteCond %{REQUEST_FILENAME} !-f\n";
#    $OUT .= "  RewriteCond %{REQUEST_FILENAME} !-d\n";
#    $OUT .= "  RewriteRule ^/\$ /gitweb/gitweb.cgi [PT]\n";
#    $OUT .= "  RewriteRule ^/(.*\\.git/(?!/?(HEAD|info|objects|refs)).*)?\$ /gitweb/gitweb.cgi%{REQUEST_URI} [L,PT]\n\n";
    
#    if( $port eq 80 ) {
#      $OUT .= "  # Force clients from the Internet to use HTTPS\n";
#      $OUT .= "  RewriteEngine on\n";
#      $OUT .= "  RewriteCond   %{REMOTE_ADDR} !^10\\.1\\.0\\.[0-9]+\$\n";
#      $OUT .= "  RewriteCond   %{HTTPS} !=on\n";
#      $OUT .= "  RewriteRule   .* https://%{SERVER_NAME}%{REQUEST_URI} [R,L]\n\n";
#    } 
    
#    $OUT .= "  <Directory $GitWebRoot>\n";
#    $OUT .= "    Options ExecCGI FollowSymLinks\n";
#    $OUT .= "    DirectoryIndex gitweb.cgi\n";
#    $OUT .= "    AddHandler cgi-script .cgi\n";
#    $OUT .= "    Order allow,deny\n";
#    if( $port eq 80 ) {
#      $OUT .= "    Allow from $gitweb_allow\n";
#    } else {
#      $OUT .= "    Allow from All\n";
#    }
#    $OUT .= "  </Directory>\n\n";

    $OUT .= "  <Directory /usr/libexec/git-core>\n";
    $OUT .= "    Options ExecCGI Indexes\n";
    $OUT .= "    Order allow,deny\n";
#    if( $port eq 80 ) {
#      $OUT .= "    Allow from $gitweb_allow\n";
#    } else {
      $OUT .= "    Allow from All\n";
#    }
    $OUT .= "  </Directory>\n\n";

    $OUT .= "  <Directory $GitRepositoryRoot>\n";
    $OUT .= "    Options ExecCGI\n";
#    $OUT .= "    Order   allow,deny\n";
#    if( $port eq 80 ) {
#      $OUT .= "    Allow from $gitweb_allow\n";
#    } else {
      $OUT .= "    Allow from All\n";
#    }
    $OUT .= "  </Directory>\n\n";

    my @repositories = $git_db->get_all_by_prop('type' => 'repository');
    foreach my $repository (@repositories)
    {
      my $git_repository          = $repository->key;
      my %properties              = $repository->props;
    
      my $allow;
      my $authentication_required = 0;
      my $satisfy                 = 'All';
      
      # Retrieve the access rules for the repository
      
      if ($properties{'AccessType'}) {
        if ($properties{'AccessType'} eq 'global') {
          $allow = 'all';
        } elsif ($properties{'AccessType'} eq 'private') {
          $allow = join (' ', ($localAccess, $externalSSLAccess)) ;
        } elsif ($properties{'AccessType'} eq 'local') {
          $allow = $localAccess;
        } else {
          $allow = '127.0.0.1'; # Catch incorrect values, including empty ones
        }
      }
    
      $effectiveUsersReadWrite = $git_db->effective_users_list_from( $properties{'GroupsReadWrite'}, 
                                                                     $properties{'UsersReadWrite'} ); 
      $effectiveUsersReadOnly  = $git_db->effective_users_list_from( $properties{'GroupsReadOnly'},  
                                                                     $properties{'UsersReadOnly'} ); 

      $OUT .= "  # Git Repository : $git_repository.git ($properties{'Description'})\n";
      $OUT .= "  #   - AccessType : $properties{'AccessType'}\n";
      $OUT .= "  #   - ForceSSL   : $properties{'ForceSSL'}\n";
      $OUT .= "  #   - Auth. Req. : $properties{'AuthenticationRequired'}\n";
      $OUT .= "  #   - Allow From : $allow\n";

      if( $port eq 80 ) {
        $OUT .= "  <LocationMatch \"^/$git_repository.git/git-receive-pack\$\">\n";
      } else {
        $OUT .= "  <Location \"/$git_repository.git\">\n";
        $OUT .= "    SSLRequireSSL\n";
      }      
#      if( $port eq 80 ) {
#        $OUT .= "    # Force clients from the Internet to use HTTPS\n";
#        $OUT .= "    RewriteEngine on\n";
#        $OUT .= "    RewriteCond   %{REMOTE_ADDR} !^10\\.1\\.0\\.[0-9]+\$\n";
#        $OUT .= "    RewriteCond   %{HTTPS} !=on\n";
#        $OUT .= "    RewriteRule   .* https://%{SERVER_NAME}%{REQUEST_URI} [R,L]\n";
#      }
        
      $OUT .= "\n";
      $OUT .= "    # HTTP Basic Authentication\n";
      $OUT .= "    AuthName      \"Git repository: $git_repository\.git ($properties{'Description'})\"\n";
      $OUT .= "    AuthType      Basic\n";
      $OUT .= "    AuthExternal  pwauth\n";
      $OUT .= "    Require user  $effectiveUsersReadWrite\n";
      $OUT .= "\n";
      $OUT .= "    #   Allow Network Access and/or Basic Auth\n";
      $OUT .= "    Satisfy       Any\n";
      $OUT .= "\n";
      $OUT .= "    #   Network Access Control\n";
      $OUT .= "    Order         Deny,Allow\n";
      $OUT .= "    Deny          from All\n";
      if( $port eq 80 ) {
        $OUT .= "    Allow         from $allow\n";
      } else {
        $OUT .= "    Allow         from All\n";
      }
      $OUT .= "\n";
      $OUT .= "    # Read only access:\n";
      $OUT .= "    #  Configured Group(s): " . ($properties{'GroupsReadOnly'} || "none") . "\n";
      $OUT .= "    #  Configured User(s) : " . ($properties{'UsersReadOnly'}  || "none") . "\n";
      $OUT .= "    #  Effective User(s)  : " . ($effectiveUsersReadOnly       || "Anonymous") . "\n";

      $OUT .= "\n";
      $OUT .= "    # Read/Write access:\n";
      $OUT .= "    #  Configured Group(s): " . ($properties{'GroupsReadWrite'} || "none") . "\n";
      $OUT .= "    #  Configured User(s) : " . ($properties{'UsersReadWrite'}  || "none") . "\n";
      $OUT .= "    #  Effective User(s)  : " . ($effectiveUsersReadWrite       || "Anonymous") . "\n";
      $OUT .= "\n";
      if( $port eq 80 ) {
        $OUT .= "  </LocationMatch> # $git_repository.git\n\n";
      } else {
        $OUT .= "  </Location> # $git_repository.git\n\n";
      }
    }
    $OUT .= "</VirtualHost>\n\n";
  }
}
