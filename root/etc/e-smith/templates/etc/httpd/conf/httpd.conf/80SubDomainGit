{
  # $Id: 80SubDomainGit 1 2012-04-22 11:25:58Z marco $
  #
  # Git Repositories Template
  #
  # This configures the Apache 2.x webserver to be able to function
  # as a Git repository server using git-http-backend and gitweb.
  #
  # Required packages: git gitweb
  #  
  # This setup provides "dual URLS", where URL like <http://git.example.com/my_repository.git>
  # loads Gitweb in the browser and the same URL can be used in commands like `git clone` and `git remote add`.
  #
  # Please see documentation for:
  #   1. `git-http-backend`, <http://www.kernel.org/pub/software/scm/git/docs/git-http-backend.html>
  #   2. `gitweb`, <http://repo.or.cz/w/alt-git.git?a=blob_plain;f=gitweb/README>
  #
  # Also see Scott Chacon's "Smart HTTP Transport", <http://progit.org/2010/03/04/smart-http.html>
  #
  # Access Rules:
  # - Global:  gitweb view from the Internet and the local network with public repositories
  #            repository read from the Internet and the local network
  #            repository write from the Internet but authenticated with HTTPS
  # - Local:   accessible only from the local network (incl. gitweb)
  # 
  # Copyright (C) 2012 Marco Hess <marco.hess@through-ip.com>
  #
  # This file should not be edited. If you want to make changes to it
  # copy it to the /etc/e-smith/templates-custom directory and make
  # your modifications in the new copy. This way modifications are
  # saved when the system is restored from a backup or configuration
  # changes are made.
  #
  # This section will configure a virtual host with the necessary directory settings to
  # enable the webserver to manage the configured repositories
  
  use esmith::ConfigDB;      # General smeserver-git configuration
  use esmith::NetworksDB;    # Get the network IP address configuration
  use esmith::AccountsDB;    # Collect users that are members of a group
  use esmith::GitDB;         # Contains all git repositories configuration data

  my $config_db = esmith::ConfigDB->open_ro() or
    die "Couldn't open ConfigDB\n";

  my $status = $git{'status'} || "disabled";
  return "    # git is disabled.\n\nuse 'config setprop git status enabled' to enable HTTP access for git on your server.\n"
    unless $status eq 'enabled';

  my $domain = $git{'domain'} || "disabled";
  return "    # no domain for git defined!\nuse 'config setprop git domain git.yourdomain.com' to set a domain name for your server.\n"
    if $domain eq 'disabled';

  my $access = $git{'allow_access_from'} || "disabled";
  return "    # no allow_access_from setting for git defined!\nuse 'config setprop git allow_access_from [local|internet]' to set network access level for gitweb.\n"
    if $access eq 'disabled';

  my $debugging         = $git{'debugging'}        || "disabled";
  my $user_repositories = $git{'UserRepositories'} || "disabled";
    
  # Open additional databases for configuring individual repositories  
  my $networks_db = esmith::NetworksDB->open_ro() or
    die "Couldn't open NetworksDB\n";
    
  my $accounts_db = esmith::AccountsDB->open_ro() or
    die "Couldn't open AccountsDB\n";
  
  my $git_db = esmith::GitDB->open_ro() or
    die "Couldn't open GitDB\n";

  # Setup access permissions for webgit viewing  
  my $gitweb_allow = '127.0.0.1'; # Catch incorrect values, including empty ones
  # Setup the rules from which address range we allow access
  if ($git{'allow_access_from'}) {
    if ($git{'allow_access_from'} eq 'internet') {
      $gitweb_allow = 'All';
    } elsif ($git{'allow_access_from'} eq 'local') {
      $gitweb_allow = $localAccess;
    } 
  }
    
  my $GitWebRoot        = "/usr/share/gitweb";
  my $GitRepositoryRoot = "/home/e-smith/files/git";

  $OUT  = "";
  $OUT .= "# " . $networks_db->local_access_spec('private') .  "\n";
  $OUT .= "# " . $networks_db->local_access_spec('public') .  "\n";

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  #~~~ Automatically redirect everything to the HTTPS domain
  
  $OUT .= "<VirtualHost 0.0.0.0:80>\n";
  $OUT .= "  # Configure hostname\n";
  $OUT .= "  ServerName   $domain\n";

  if( $debugging eq 'enabled' ) {
    $OUT .= "  # Set logging options - mainly for debugging\n";
    $OUT .= "  LogLevel        debug\n";
    $OUT .= "  # for debugging rewrite rules\n";
    $OUT .= "  RewriteLog      /var/log/httpd/rewrite_log\n";
    $OUT .= "  RewriteLogLevel 9\n";
    $OUT .= "\n";
  }

  $OUT .= "  # Force all clients use HTTPS\n";
  $OUT .= "  RewriteEngine on\n";
  $OUT .= "  RewriteCond   %{HTTPS} !=on\n";
  $OUT .= "  RewriteRule   .* https://%{SERVER_NAME}%{REQUEST_URI} [R,L]\n\n";
  $OUT .= "</VirtualHost>\n\n";

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  #~~~ All Git domain handling done through HTTPS

  $OUT .= "<VirtualHost 0.0.0.0:443>\n";
  $OUT .= "  # Configure hostname\n";
  $OUT .= "  ServerName     $domain\n";
  $OUT .= "  SSLEngine      on\n";
  $OUT .= "\n";
  $OUT .= "  # Configure repository location\n";
  $OUT .= "  DocumentRoot $GitWebRoot\n";
  $OUT .= "  Options ExecCGI FollowSymLinks\n";
  $OUT .= "\n";
  
  if( $debugging eq 'enabled' ) {
    $OUT .= "  # Set logging options - mainly for debugging\n";
    $OUT .= "  LogLevel        debug\n";
    $OUT .= "  # for debugging rewrite rules\n";
    $OUT .= "  RewriteLog      /var/log/httpd/rewrite_log\n";
    $OUT .= "  RewriteLogLevel 9\n";
    $OUT .= "\n";
  }
  
  $OUT .= "  # Setup password authentication method\n";
  $OUT .= "  AddExternalAuth       pwauth /usr/lib/httpd/modules/pwauth\n";
  $OUT .= "  SetExternalAuthMethod pwauth pipe\n\n";

  $OUT .= "  # Load configuration for Gitweb\n";
  $OUT .= "  SetEnv GITWEB_CONFIG /etc/gitweb.conf\n\n";
  
  $OUT .= "  # Configure Git HTTP Backend\n";
  $OUT .= "  SetEnv GIT_PROJECT_ROOT $GitRepositoryRoot\n";
  $OUT .= "  SetEnv GIT_HTTP_EXPORT_ALL\n";
  $OUT .= "  SetEnv REMOTE_USER REDIRECT_REMOTE_USER\n\n"; 

  $OUT .= "  # If HTTP:Authorization was send in the request, ensure we make it\n";
  $OUT .= "  # available in the HTTP_AUTHORIZATION environment variable for use by gitweb.\n";
  $OUT .= "  RewriteEngine on\n";
  $OUT .= "  RewriteCond %\{HTTP:Authorization\} ^(.+)\n";
  $OUT .= "  RewriteRule .? - [e=HTTP_AUTHORIZATION:%1]\n\n";
  
  $OUT .= "  # For access to git-receive-pack items (i.e. Git PUSH operations) rewrite the\n";
  $OUT .= "  # URL to an internal virtual push directory that can be handled in a separate\n";
  $OUT .= "  # Location directive where we handle the PUSH authorisation separately from the\n";
  $OUT .= "  # PULL authorisation.\n";
  $OUT .= "  RewriteCond %\{REQUEST_URI\}  !^/push/\n";
  $OUT .= "  RewriteCond %\{QUERY_STRING\} service=git-receive-pack [OR]\n";
  $OUT .= "  RewriteCond %\{REQUEST_URI\}  /git-receive-pack\$\n";
  $OUT .= "  RewriteRule ^\(.*\)\$ /push%{REQUEST_URI} [PT]\n\n";

  $OUT .= "  # We use ScriptAliasMatch to match those URLs \n";
  $OUT .= "  # that git-http-backend can handle, and forward the rest to gitweb\n";
  $OUT .= "  # In this first one we catch the push virtual directory and pass the URL without the\n";
  $OUT .= "  # /push/ to git-http-backend\n";
  $OUT .= "  ScriptAliasMatch \\\n";
  $OUT .= "            \"\(\?x\)\^\/push\/\(\.\*/(HEAD \| \\\n";
  $OUT .= "                        info/refs \| \\\n";
  $OUT .= "                        objects/\(info/\[^/\]+ \| \\\n";
  $OUT .= "                                 \[0-9a-f\]\{2\}/\[0-9a-f\]\{38\} \| \\\n";
  $OUT .= "                                 pack/pack-\[0-9a-f\]\{40\}\\.\(pack|idx\)\) \| \\\n";
  $OUT .= "                        git-\(upload\|receive\)-pack\)\)\$\" \\\n";
  $OUT .= "            /usr/libexec/git-core/git-http-backend/\$1\n";
  $OUT .= "\n";

  $OUT .= "  # In this second we catch all the normal Git URLs for git-http-backend\n";
  $OUT .= "  ScriptAliasMatch \\\n";
  $OUT .= "            \"\(\?x\)\^\/\(\.\*/(HEAD \| \\\n";
  $OUT .= "                        info/refs \| \\\n";
  $OUT .= "                        objects/\(info/\[^/\]+ \| \\\n";
  $OUT .= "                                 \[0-9a-f\]\{2\}/\[0-9a-f\]\{38\} \| \\\n";
  $OUT .= "                                 pack/pack-\[0-9a-f\]\{40\}\\.\(pack|idx\)\) \| \\\n";
  $OUT .= "                        git-\(upload\|receive\)-pack\)\)\$\" \\\n";
  $OUT .= "            /usr/libexec/git-core/git-http-backend/\$1\n";
  $OUT .= "\n";
  
  $OUT .= "  # Serve HTML with gitweb. Use Alias to allow serving required CSS and JS files.\n";
  $OUT .= "  Alias  /gitweb              /usr/share/gitweb\n\n";
  $OUT .= "  Alias  /static/gitweb.css   /etc/e-smith/web/common/gitweb/gitweb.css\n";
  $OUT .= "  Alias  /static/gitweb.js    /etc/e-smith/web/common/gitweb/gitweb.js\n";

#  $OUT .= "  # Ensure we can browse the repo with http://git.server.com/repo.git\n";
#  $OUT .= "  # instead of http://git.server.com/?p=repo.git;a=summary.\n";
#  $OUT .= "  RewriteEngine on\n";
#  $OUT .= "  RewriteCond %{REQUEST_FILENAME} !-f\n";
#  $OUT .= "  RewriteCond %{REQUEST_FILENAME} !-d\n";
#  $OUT .= "  RewriteRule ^/\$ /gitweb/gitweb.cgi [PT]\n\n";

#  $OUT .= "  RewriteCond %{REQUEST_URI} !=/gitweb.*\n";
#  $OUT .= "  RewriteCond %{REQUEST_FILENAME} !-f\n";
#  $OUT .= "  RewriteCond %{REQUEST_FILENAME} !-d\n";
#  $OUT .= "  RewriteRule ^/(.*\\.git/(?!/?(HEAD|info|objects|refs)).*)?\$ /gitweb/gitweb.cgi%{REQUEST_URI} [L,PT]\n\n";
  
  $OUT .= "  <Directory $GitWebRoot>\n";
  $OUT .= "    Options        ExecCGI\n";
  $OUT .= "    AllowOverride  None\n";
  $OUT .= "    AddHandler     cgi-script .cgi\n";
  $OUT .= "    DirectoryIndex gitweb.cgi\n";
  $OUT .= "    Order          Allow,Deny\n";
  $OUT .= "    Allow from     $gitweb_allow\n";
  $OUT .= "  </Directory>\n\n";

  $OUT .= "  <Directory /etc/e-smith/web/common/gitweb>\n";
  $OUT .= "    AllowOverride  None\n";
  $OUT .= "    Order          Allow,Deny\n";
  $OUT .= "    Allow from     $gitweb_allow\n";
  $OUT .= "  </Directory>\n\n";

  $OUT .= "  <Directory $GitRepositoryRoot>\n";
  $OUT .= "    Options        ExecCGI\n";
  $OUT .= "    Order          Allow,Deny\n";
  $OUT .= "    Allow from     All\n";
  $OUT .= "  </Directory>\n\n";

  $OUT .= "  <Directory /usr/libexec/git-core>\n";
  $OUT .= "    Options        ExecCGI Indexes\n";
  $OUT .= "    Order          Allow,Deny\n";
  $OUT .= "    Allow from     All\n";
  $OUT .= "  </Directory>\n\n";

  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
  #~~~ Setup access for individual Git repositories
 
  my @repositories = $git_db->get_all_by_prop('type' => 'repository');
  foreach my $repository (@repositories)
  {
    my $git_repository          = $repository->key;
    my %properties              = $repository->props;
    
    # Retrieve the access rules for the repository
    my $satisfy                 = 'All';
    my $allow_from_network = '127.0.0.1'; # Catch incorrect values, including empty ones
    if ($properties{'allow_access_from'}) {
      if ($properties{'allow_access_from'} eq 'internet') {
        $allow_from_network = 'All';
      } elsif ($properties{'allow_access_from'} eq 'local') {
        $allow_from_network = $localAccess;
      } 
    }

    # Determine the effective users list from the listed groups and individual users
    my $effective_push_users = $git_db->effective_users_list_from( $properties{'push_groups'}, 
                                                                   $properties{'push_users'} ); 
                                                                   
    my $effective_pull_users = $git_db->effective_users_list_from( $properties{'pull_groups'},  
                                                                   $properties{'pull_users'} ); 
                                                                   
    my $effective_pull_push_users = $git_db->effective_users_list_from( $properties{'push_groups'}, 
                                                                   $properties{'push_users'},
                                                                   $properties{'pull_groups'},  
                                                                   $properties{'pull_users'} ); 

    $OUT .= "  # ~~~~~~~~~~~~~~~~~~~~~~~~\n";
    $OUT .= "  # Git Repository         : $git_repository.git (" . ($properties{'description'} || "ERROR - DESCRIPTION NOT CONFIGURED!") . ")\n";
    $OUT .= "  #  - Allow access from   : " . ($properties{'allow_access_from'} || "ERROR - ALLOW_ACCESS_FROM NOT CONFIGURED!") . " => Network allow from $allow_from_network\n";
    $OUT .= "  #  - Effective PULL Users: '" . ($effective_pull_users || "Anonymous") . "' <= (" . ($properties{'pull_groups'} || "none") . "/" . ($properties{'pull_users'}  || "none") . ")\n";
    $OUT .= "  #  - Effective PUSH Users: '" . ($effective_push_users || "Anonymous") . "' <= (" . ($properties{'push_groups'} || "none") . "/" . ($properties{'push_users'}  || "none") . ")\n";
    $OUT .= "  #  - Effective PULL/PUSH : '" . ($effective_pull_push_users || "Anonymous") . "'\n";

    $OUT .= "  <Location \"/$git_repository.git\"> # for PULL access to $git_repository.git\n\n";
    $OUT .= "    SSLRequireSSL\n\n";

    if( $effective_pull_users ) {
      $OUT .= "    # PULL Access Control\n";
      $OUT .= "    AuthType      Basic\n";
      $OUT .= "    AuthExternal  pwauth\n";
      $OUT .= "    AuthName      \"Git repository: $git_repository\.git (" . ($properties{'description'} || "ERROR - DESCRIPTION NOT CONFIGURED!"). ")\"\n";
      $OUT .= "    Require user  $effective_pull_push_users\n";
    } else {
      $OUT .= "    # Anoymous Pull Access\n";
    }
    
    if( $allow_from_network ne 'All' ) { 
      $OUT .= "\n    # Restricted network access\n";
      $OUT .= "    Order         Deny,Allow\n";
      $OUT .= "    Deny          from All\n";
      $OUT .= "    Allow         from $allow_from_network\n";
      $OUT .= "    Satisfy       All\n";
    } else {
      $OUT .= "\n    # Internet access\n";
    }
    $OUT .= "\n  </Location> # $git_repository.git\n\n";

    $OUT .= "  <Location \"/push/$git_repository.git\">  # for PUSH access to $git_repository.git\n\n";
    $OUT .= "    SSLRequireSSL\n\n";

    if( $effective_push_users ) {
      $OUT .= "    # PUSH Access Control\n";
      $OUT .= "    AuthType      Basic\n";
      $OUT .= "    AuthExternal  pwauth\n";
      $OUT .= "    AuthName      \"Git repository: $git_repository\.git (" . ($properties{'description'} || "ERROR - DESCRIPTION NOT CONFIGURED!"). ")\"\n";
      $OUT .= "    Require user  $effective_push_users\n";
    } else {
      $OUT .= "    # Anoymous PUSH Access\n";
    }
    
    if( $allow_from_network ne 'All' ) { 
      $OUT .= "\n    # Restricted network access\n";
      $OUT .= "    Order         Deny,Allow\n";
      $OUT .= "    Deny          from All\n";
      $OUT .= "    Allow         from $allow_from_network\n";
      $OUT .= "    Satisfy       All\n";
    } else {
      $OUT .= "\n    # Internet access\n";
    }

    $OUT .= "\n  </Location> # /push/$git_repository.git\n\n";
  }
  $OUT .= "</VirtualHost>\n\n";
}
